{"version":3,"file":"server.js","mappings":"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","sources":["webpack://newmacs/./src/server/TeamsAppsComponents.ts?6a42","webpack://newmacs/./src/server/newMaCsBot/NewMaCsBot.ts?11f6","webpack://newmacs/./src/server/newMaCsBot/cards/welcomeCard.ts?61b2","webpack://newmacs/./src/server/newMaCsBot/dialogBot.ts?97eb","webpack://newmacs/./src/server/newMaCsBot/dialogs/helloDialog.ts?c7f1","webpack://newmacs/./src/server/newMaCsBot/dialogs/helpDialog.ts?cca7","webpack://newmacs/./src/server/newMaCsBot/dialogs/idDialog.ts?264e","webpack://newmacs/./src/server/newMaCsBot/dialogs/mainDialog.ts?32da","webpack://newmacs/./src/server/newMaCsBot/dialogs/mentionUserDialog.ts?15a6","webpack://newmacs/./src/server/newMaCsBot/dialogs/teamsInfoDialog.ts?9c8e","webpack://newmacs/./src/server/newMaCsMessageExtension/NewMaCsMessageExtension.ts?70e2","webpack://newmacs/./src/server/newMaCsOutgoingWebhook/NewMaCsOutgoingWebhook.ts?255f","webpack://newmacs/external commonjs \"botbuilder\"?9bd5","webpack://newmacs/external commonjs \"botbuilder-dialogs\"?0e7e","webpack://newmacs/external commonjs \"compression\"?e0c2","webpack://newmacs/external commonjs \"debug\"?b525","webpack://newmacs/external commonjs \"dotenv\"?3fba","webpack://newmacs/external commonjs \"express\"?c4a6","webpack://newmacs/external commonjs \"express-msteams-host\"?eac2","webpack://newmacs/external commonjs \"morgan\"?66c0","webpack://newmacs/external node-commonjs \"crypto\"?a8b2","webpack://newmacs/external node-commonjs \"http\"?78d4","webpack://newmacs/external node-commonjs \"path\"?1f34","[]","webpack://newmacs/./src/server/server.ts?3175"],"sourcesContent":["// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the newMaCsBot bot\nexport * from \"./newMaCsBot/NewMaCsBot\";\n// Automatically added for the newMaCsOutgoingWebhook outgoing webhook\nexport * from \"./newMaCsOutgoingWebhook/NewMaCsOutgoingWebhook\";\n","import { BotDeclaration, PreventIframe, MessageExtensionDeclaration } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { CardFactory, ConversationState, MemoryStorage, UserState, TurnContext } from \"botbuilder\";\nimport { DialogBot } from \"./dialogBot\";\nimport { MainDialog } from \"./dialogs/mainDialog\";\nimport WelcomeCard from \"./cards/welcomeCard\";\nimport NewMaCsMessageExtension from \"../newMaCsMessageExtension/NewMaCsMessageExtension\";\nconst log = debug(\"msteams\");\n\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD)\n@PreventIframe(\"/newMaCsBot/aboutNewMaCs.html\")\nexport class NewMaCsBot extends DialogBot {\n    constructor(conversationState: ConversationState, userState: UserState) {\n        super(conversationState, userState, new MainDialog());\n        this._newMaCsMessageExtension = new NewMaCsMessageExtension();\n\n        this.onMembersAdded(async (context, next) => {\n            const membersAdded = context.activity.membersAdded;\n            if (membersAdded && membersAdded.length > 0) {\n                for (let cnt = 0; cnt < membersAdded.length; cnt++) {\n                    if (membersAdded[cnt].id !== context.activity.recipient.id) {\n                        await this.sendWelcomeCard(context);\n                    }\n                }\n            }\n            await next();\n        });\n    }\n\n    @MessageExtensionDeclaration(\"newMaCsMessageExtension\")\n    private _newMaCsMessageExtension: NewMaCsMessageExtension;\n\n    public async sendWelcomeCard(context: TurnContext): Promise<void> {\n        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n        await context.sendActivity({ attachments: [welcomeCard] });\n    }\n\n}\n","const WelcomeCard = require(\"./welcomeCard.json\");\nexport default WelcomeCard;\n","import {\n    ConversationState,\n    UserState,\n    TeamsActivityHandler,\n    TurnContext\n} from \"botbuilder\";\nimport { MainDialog } from \"./dialogs/mainDialog\";\n\nexport class DialogBot extends TeamsActivityHandler {\n    public dialogState: any;\n\n    constructor(public conversationState: ConversationState, public userState: UserState, public dialog: MainDialog) {\n        super();\n        this.conversationState = conversationState;\n        this.userState = userState;\n        this.dialog = dialog;\n        this.dialogState = this.conversationState.createProperty(\"DialogState\");\n\n        this.onMessage(async (context, next) => {\n            await this.dialog.run(context, this.dialogState);\n            await next();\n        });\n    }\n\n    public async run(context: TurnContext) {\n        await super.run(context);\n        await this.conversationState.saveChanges(context, false);\n        await this.userState.saveChanges(context, false);\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst HELLOWORLD_DIALOG_ID = \"helloDialog\";\nconst HELLOWORLD_WATERFALL_DIALOG_ID = \"helloWaterfallDialog\";\n\nexport class HelloDialog extends ComponentDialog {\n    constructor() {\n        super(HELLOWORLD_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(HELLOWORLD_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = HELLOWORLD_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"Hola Mundo!\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst HELP_DIALOG_ID = \"helpDialog\";\nconst HELP_WATERFALL_DIALOG_ID = \"helpWaterfallDialog\";\n\nexport class HelpDialog extends ComponentDialog {\n    constructor() {\n        super(HELP_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(HELP_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = HELP_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"I am terribly sorry, but my developer hasn't trained me to do anything yet 😂. Please refer to [this link](https://docs.microsoft.com/en-us/microsoftteams/platform/bots/what-are-bots) to see how to develop bots for Teams\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst ID_DIALOG_ID = \"idDialog\";\nconst ID_WATERFALL_DIALOG_ID = \"idWaterfallDialog\";\n\nexport class IdDialog extends ComponentDialog {\n    constructor() {\n        super(ID_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(ID_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = ID_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"Bienvenidos, esto es I+D! Proyecto INTERACTIVO 1.0\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    InputHints,\n    TurnContext\n} from \"botbuilder\";\nimport { TeamsInfoDialog } from \"./teamsInfoDialog\";\nimport { HelpDialog } from \"./helpDialog\";\nimport { MentionUserDialog } from \"./mentionUserDialog\";\nimport { HelloDialog } from \"./helloDialog\";\nimport { IdDialog } from \"./idDialog\";\n\nconst MAIN_DIALOG_ID = \"mainDialog\";\nconst MAIN_WATERFALL_DIALOG_ID = \"mainWaterfallDialog\";\n\nexport class MainDialog extends ComponentDialog {\n    public onboarding: boolean;\n    constructor() {\n        super(MAIN_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new TeamsInfoDialog())\n            .addDialog(new HelpDialog())\n            .addDialog(new HelloDialog())\n            .addDialog(new IdDialog())\n            .addDialog(new MentionUserDialog())\n            .addDialog(new WaterfallDialog(MAIN_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this),\n                this.actStep.bind(this),\n                this.finalStep.bind(this)\n            ]));\n        this.initialDialogId = MAIN_WATERFALL_DIALOG_ID;\n        this.onboarding = false;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if ((stepContext.options as any).restartMsg) {\n            const messageText = (stepContext.options as any).restartMsg ? (stepContext.options as any).restartMsg : \"Hola! ¿En que te puedo ayudar hoy? Para mas informacion escribe: 'ayuda'\";\n            const promptMessage = MessageFactory.text(messageText, messageText, InputHints.ExpectingInput);\n            return await stepContext.prompt(\"TextPrompt\", { prompt: promptMessage });\n        } else {\n            this.onboarding = true;\n            return await stepContext.next();\n        }\n    }\n\n    private async actStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if (stepContext.result) {\n            const result = stepContext.result.trim().toLocaleLowerCase();\n            switch (result) {\n                case \"who\":\n                case \"who am i?\": {\n                    return await stepContext.beginDialog(\"teamsInfoDialog\");\n                }\n                case \"hello world\":\n                case \"hello\": {\n                    return await stepContext.beginDialog(\"helloDialog\")\n                }\n                case \"id team\":\n                case \"id\": {\n                    return await stepContext.beginDialog(\"idDialog\")\n                }\n                case \"get help\":\n                case \"help\": {\n                    return await stepContext.beginDialog(\"helpDialog\");\n                }\n                case \"mention me\":\n                case \"mention\": {\n                    return await stepContext.beginDialog(\"mentionUserDialog\");\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"No te he entendido... ¿Puedes repetirlo por favor?\");\n                    return await stepContext.next();\n                }\n            }\n        } else if (this.onboarding) {\n            switch (stepContext.context.activity.text) {\n                case \"who\": {\n                    return await stepContext.beginDialog(\"teamsInfoDialog\");\n                }\n                case \"hello\": {\n                    return await stepContext.beginDialog(\"helloDialog\")\n                }\n                case \"id\": {\n                    return await stepContext.beginDialog(\"idDialog\")\n                }\n                case \"help\": {\n                    return await stepContext.beginDialog(\"helpDialog\");\n                }\n                case \"mention\": {\n                    return await stepContext.beginDialog(\"mentionUserDialog\");\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"No te he entendido... ¿Puedes repetirlo por favor?\");\n                    return await stepContext.next();\n                }\n            }\n        }\n        return await stepContext.next();\n    }\n\n    private async finalStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        return await stepContext.replaceDialog(this.initialDialogId, { restartMsg: \"¿En que te puedo ayudar hoy? Escribe 'info' para mas informacion\" });\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst MENTION_DIALOG_ID = \"mentionUserDialog\";\nconst MENTION_WATERFALL_DIALOG_ID = \"mentionUserWaterfallDialog\";\n\nexport class MentionUserDialog extends ComponentDialog {\n    constructor() {\n        super(MENTION_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(MENTION_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = MENTION_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const mention = {\n            mentioned: stepContext.context.activity.from,\n            text: `<at>${new TextEncoder().encode(stepContext.context.activity.from.name)}</at>`,\n            type: \"mention\"\n        };\n        const replyActivity = MessageFactory.text(`Hola ${mention.text}!`);\n        replyActivity.entities = [mention];\n        await stepContext.context.sendActivity(replyActivity);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TeamsInfo,\n    TurnContext\n} from \"botbuilder\";\n\nconst TEAMS_INFO_DIALOG_ID = \"teamsInfoDialog\";\nconst TEAMS_INFO_WATERFALL_DIALOG_ID = \"teamsInfoWaterfallDialog\";\nlet teamsUserInfo;\n\nexport class TeamsInfoDialog extends ComponentDialog {\n    constructor() {\n        super(TEAMS_INFO_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(TEAMS_INFO_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this),\n                this.actStep.bind(this),\n                this.finalStep.bind(this)\n            ]));\n        this.initialDialogId = TEAMS_INFO_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const promptMessage = MessageFactory.text(\"Do you want me to send you the current Teams member info?\\n\\nSay **yes** if you do like to see the context or **no** if you don't\");\n        return await stepContext.prompt(\"TextPrompt\", { prompt: promptMessage });\n    }\n\n    private async actStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if (stepContext.result) {\n            const result = stepContext.result;\n            switch (result) {\n                case \"yes\": {\n                    teamsUserInfo = await TeamsInfo.getMember(stepContext.context, stepContext.context.activity.from.id);\n                    await stepContext.context.sendActivity(`Tu NOMBRE es: **${teamsUserInfo.name}**\\n\\nTu ID de TEAMS: **${teamsUserInfo.id}**\\n\\nTu EMAIL: **${teamsUserInfo.email}**`);\n                    break;\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"No te he entendido... ¿Puedes repetirlo por favor?\");\n                    return await stepContext.next();\n                }\n            }\n        }\n        return await stepContext.next();\n    }\n\n    private async finalStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        await stepContext.context.sendActivity(\"Now it's time to add more functionality to your bot, so head over to the [docs](https://aka.ms/yoTeams) and start building\");\n        return await stepContext.endDialog();\n    }\n}\n","import * as debug from \"debug\";\nimport { PreventIframe } from \"express-msteams-host\";\nimport { TurnContext, CardFactory, MessagingExtensionQuery, MessagingExtensionResult } from \"botbuilder\";\nimport { IMessagingExtensionMiddlewareProcessor } from \"botbuilder-teams-messagingextensions\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n@PreventIframe(\"/newMaCsMessageExtension/config.html\")\nexport default class NewMaCsMessageExtension implements IMessagingExtensionMiddlewareProcessor {\n\n    public async onQuery(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResult> {\n        const card = CardFactory.adaptiveCard(\n            {\n                type: \"AdaptiveCard\",\n                body: [\n                    {\n                        type: \"TextBlock\",\n                        size: \"Large\",\n                        text: \"Headline\"\n                    },\n                    {\n                        type: \"TextBlock\",\n                        text: \"Description\"\n                    },\n                    {\n                        type: \"Image\",\n                        url: `https://${process.env.PUBLIC_HOSTNAME}/assets/icon.png`\n                    },\n                    {\n                        type: \"ActionSet\",\n                        actions: [\n                            {\n                                type: \"Action.Execute\",\n                                title: \"More details\",\n                                data: {\n                                    action: \"moreDetails\",\n                                    id: \"1234-5678\"\n                                },\n                                fallback: \"Action.Submit\"\n                            }\n                        ]\n                    }\n                ],\n                $schema: \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                version: \"1.4\"\n            });\n        const preview = {\n            contentType: \"application/vnd.microsoft.card.thumbnail\",\n            content: {\n                title: \"Headline\",\n                text: \"Description\",\n                images: [\n                    {\n                        url: `https://${process.env.PUBLIC_HOSTNAME}/assets/icon.png`\n                    }\n                ]\n            }\n        };\n\n        if (query.parameters && query.parameters[0] && query.parameters[0].name === \"initialRun\") {\n            // initial run\n\n            return Promise.resolve({\n                type: \"result\",\n                attachmentLayout: \"list\",\n                attachments: [\n                    { ...card, preview }\n                ]\n            } as MessagingExtensionResult);\n        } else {\n            // the rest\n            return Promise.resolve({\n                type: \"result\",\n                attachmentLayout: \"list\",\n                attachments: [\n                    { ...card, preview }\n                ]\n            } as MessagingExtensionResult);\n        }\n    }\n\n    public async onCardButtonClicked(context: TurnContext, value: any): Promise<void> {\n        // Handle the Action.Submit action on the adaptive card\n        if (value.action === \"moreDetails\") {\n            log(`I got this ${value.id}`);\n        }\n        return Promise.resolve();\n    }\n\n    // this is used when canUpdateConfiguration is set to true\n    public async onQuerySettingsUrl(context: TurnContext): Promise<{ title: string, value: string }> {\n        return Promise.resolve({\n            title: \"NewMaCS Message Extension Configuration\",\n            value: `https://${process.env.PUBLIC_HOSTNAME}/newMaCsMessageExtension/config.html?name={loginHint}&tenant={tid}&group={groupId}&theme={theme}`\n        });\n    }\n\n    public async onSettings(context: TurnContext): Promise<void> {\n        // take care of the setting returned from the dialog, with the value stored in state\n        const setting = context.activity.value.state;\n        log(`New setting: ${setting}`);\n        return Promise.resolve();\n    }\n\n}\n","import * as builder from \"botbuilder\";\nimport * as express from \"express\";\nimport * as crypto from \"crypto\";\nimport { OutgoingWebhookDeclaration, IOutgoingWebhook } from \"express-msteams-host\";\n\n/**\n * Implementation for NewMaCS Outgoing Webhook\n */\n@OutgoingWebhookDeclaration(\"/api/webhook\")\nexport class NewMaCsOutgoingWebhook implements IOutgoingWebhook {\n\n    /**\n     * Implement your outgoing webhook logic here\n     * @param req the Request\n     * @param res the Response\n     * @param next\n     */\n    public requestHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\n        // parse the incoming message\n        const incoming = req.body as builder.Activity;\n\n        // create the response, any Teams compatible responses can be used\n        const message: Partial<builder.Activity> = {\n            type: builder.ActivityTypes.Message\n        };\n\n        const securityToken = process.env.SECURITY_TOKEN;\n        if (securityToken && securityToken.length > 0) {\n            // There is a configured security token\n            const auth = req.headers.authorization;\n            const msgBuf = Buffer.from((req as any).rawBody, \"utf8\");\n            const msgHash = \"HMAC \" + crypto\n                .createHmac(\"sha256\", Buffer.from(securityToken as string, \"base64\"))\n                .update(msgBuf)\n                .digest(\"base64\");\n\n            if (msgHash === auth) {\n                // Message was ok and verified\n                message.text = `Echo ${incoming.text}`;\n            } else {\n                // Message could not be verified\n                message.text = \"Error: message sender cannot be verified\";\n            }\n        } else {\n            // There is no configured security token\n            message.text = \"Error: outgoing webhook is not configured with a security token\";\n        }\n\n        // send the message\n        res.send(JSON.stringify(message));\n    }\n}\n","module.exports = require(\"botbuilder\");","module.exports = require(\"botbuilder-dialogs\");","module.exports = require(\"compression\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-msteams-host\");","module.exports = require(\"morgan\");","module.exports = require(\"crypto\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport * as compression from \"compression\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(\"Initializing Microsoft Teams Express hosted App...\");\n\n// Initialize dotenv, to use .env file settings if existing\nrequire(\"dotenv\").config();\n\n// The import of components has to be done AFTER the dotenv config\n// eslint-disable-next-line import/first\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add compression - uncomment to remove compression\nexpress.use(compression());\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n"],"names":["nonce","debug","NewMaCsBot","DialogBot","constructor","conversationState","userState","super","MainDialog","this","_newMaCsMessageExtension","onMembersAdded","context","next","membersAdded","activity","length","cnt","id","recipient","sendWelcomeCard","welcomeCard","CardFactory","adaptiveCard","sendActivity","attachments","MessageExtensionDeclaration","BotDeclaration","MemoryStorage","process","env","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","PreventIframe","WelcomeCard","TeamsActivityHandler","dialog","dialogState","createProperty","onMessage","run","saveChanges","HELLOWORLD_WATERFALL_DIALOG_ID","HelloDialog","ComponentDialog","addDialog","TextPrompt","WaterfallDialog","introStep","bind","initialDialogId","accessor","dialogSet","DialogSet","add","dialogContext","createContext","continueDialog","status","DialogTurnStatus","empty","beginDialog","stepContext","message","MessageFactory","text","endDialog","HELP_WATERFALL_DIALOG_ID","HelpDialog","ID_WATERFALL_DIALOG_ID","IdDialog","MAIN_WATERFALL_DIALOG_ID","TeamsInfoDialog","MentionUserDialog","actStep","finalStep","onboarding","options","restartMsg","messageText","promptMessage","InputHints","ExpectingInput","prompt","result","trim","toLocaleLowerCase","replaceDialog","MENTION_WATERFALL_DIALOG_ID","mention","mentioned","from","TextEncoder","encode","name","type","replyActivity","entities","TEAMS_INFO_WATERFALL_DIALOG_ID","teamsUserInfo","TeamsInfo","getMember","email","log","NewMaCsMessageExtension","onQuery","query","card","body","size","url","PUBLIC_HOSTNAME","actions","title","data","action","fallback","$schema","version","preview","contentType","content","images","parameters","Promise","resolve","attachmentLayout","onCardButtonClicked","value","onQuerySettingsUrl","onSettings","setting","state","NewMaCsOutgoingWebhook","requestHandler","req","res","incoming","builder","ActivityTypes","Message","securityToken","SECURITY_TOKEN","auth","headers","authorization","msgBuf","Buffer","rawBody","msgHash","crypto","createHmac","update","digest","send","JSON","stringify","OutgoingWebhookDeclaration","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","express","Express","port","PORT","use","json","verify","buf","encoding","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen"],"sourceRoot":""}